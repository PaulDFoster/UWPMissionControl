#pragma checksum "C:\Users\paulfo\documents\visual studio 2015\Projects\Sat Apps Mission Control\Sat Apps Mission Control\SatKitLive.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "BF6956A4371415986895ECCAD9C9DB15"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sat_Apps_Mission_Control
{
    partial class SatKitLive : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Media_CompositeTransform_Rotation(global::Windows.UI.Xaml.Media.CompositeTransform obj, global::System.Double value)
            {
                obj.Rotation = value;
            }
        };

        private class SatKitLive_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISatKitLive_Bindings
        {
            private global::Sat_Apps_Mission_Control.SatKitLive dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj14;
            private global::Windows.UI.Xaml.Media.CompositeTransform obj15;
            private global::Windows.UI.Xaml.Controls.TextBlock obj16;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;
            private global::Windows.UI.Xaml.Controls.TextBlock obj18;

            private SatKitLive_obj1_BindingsTracking bindingsTracking;

            public SatKitLive_obj1_Bindings()
            {
                this.bindingsTracking = new SatKitLive_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Media.CompositeTransform)target;
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 18:
                        this.obj18 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // ISatKitLive_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // SatKitLive_obj1_Bindings

            public void SetDataRoot(global::Sat_Apps_Mission_Control.SatKitLive newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Sat_Apps_Mission_Control.SatKitLive obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SIKdata(obj.SIKdata, phase);
                    }
                }
            }
            private void Update_SIKdata(global::Sat_Apps_Mission_Control.SIKDataViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SIKdata(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SIKdata_Temperature(obj.Temperature, phase);
                        this.Update_SIKdata_Visible(obj.Visible, phase);
                        this.Update_SIKdata_UV(obj.UV, phase);
                        this.Update_SIKdata_IR(obj.IR, phase);
                        this.Update_SIKdata_Heading(obj.Heading, phase);
                        this.Update_SIKdata_X(obj.X, phase);
                        this.Update_SIKdata_Y(obj.Y, phase);
                        this.Update_SIKdata_Z(obj.Z, phase);
                    }
                }
            }
            private void Update_SIKdata_Temperature(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj.ToString(), null);
                }
            }
            private void Update_SIKdata_Visible(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj10, obj.ToString(), null);
                }
            }
            private void Update_SIKdata_UV(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj.ToString(), null);
                }
            }
            private void Update_SIKdata_IR(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj.ToString(), null);
                }
            }
            private void Update_SIKdata_Heading(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj.ToString(), null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_CompositeTransform_Rotation(this.obj15, obj);
                }
            }
            private void Update_SIKdata_X(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj.ToString(), null);
                }
            }
            private void Update_SIKdata_Y(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj.ToString(), null);
                }
            }
            private void Update_SIKdata_Z(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj18, obj.ToString(), null);
                }
            }

            private class SatKitLive_obj1_BindingsTracking
            {
                global::System.WeakReference<SatKitLive_obj1_Bindings> WeakRefToBindingObj; 

                public SatKitLive_obj1_BindingsTracking(SatKitLive_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<SatKitLive_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_SIKdata(null);
                }

                public void DependencyPropertyChanged_SIKdata(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    SatKitLive_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Sat_Apps_Mission_Control.SatKitLive obj = sender as global::Sat_Apps_Mission_Control.SatKitLive;
        if (obj != null)
        {
            bindings.Update_SIKdata(obj.SIKdata, DATA_CHANGED);
        }
                    }
                }
                private long tokenDPC_SIKdata = 0;
                public void UpdateChildListeners_(global::Sat_Apps_Mission_Control.SatKitLive obj)
                {
                    SatKitLive_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Sat_Apps_Mission_Control.SatKitLive.SIKdataProperty, tokenDPC_SIKdata);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_SIKdata = obj.RegisterPropertyChangedCallback(global::Sat_Apps_Mission_Control.SatKitLive.SIKdataProperty, DependencyPropertyChanged_SIKdata);
                        }
                    }
                }
                public void PropertyChanged_SIKdata(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SatKitLive_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Sat_Apps_Mission_Control.SIKDataViewModel obj = sender as global::Sat_Apps_Mission_Control.SIKDataViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_SIKdata_Temperature(obj.Temperature, DATA_CHANGED);
                                    bindings.Update_SIKdata_Visible(obj.Visible, DATA_CHANGED);
                                    bindings.Update_SIKdata_UV(obj.UV, DATA_CHANGED);
                                    bindings.Update_SIKdata_IR(obj.IR, DATA_CHANGED);
                                    bindings.Update_SIKdata_Heading(obj.Heading, DATA_CHANGED);
                                    bindings.Update_SIKdata_X(obj.X, DATA_CHANGED);
                                    bindings.Update_SIKdata_Y(obj.Y, DATA_CHANGED);
                                    bindings.Update_SIKdata_Z(obj.Z, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Temperature":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SIKdata_Temperature(obj.Temperature, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Visible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SIKdata_Visible(obj.Visible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UV":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SIKdata_UV(obj.UV, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IR":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SIKdata_IR(obj.IR, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Heading":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SIKdata_Heading(obj.Heading, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "X":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SIKdata_X(obj.X, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Y":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SIKdata_Y(obj.Y, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Z":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SIKdata_Z(obj.Z, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Sat_Apps_Mission_Control.SIKDataViewModel cache_SIKdata = null;
                public void UpdateChildListeners_SIKdata(global::Sat_Apps_Mission_Control.SIKDataViewModel obj)
                {
                    if (obj != cache_SIKdata)
                    {
                        if (cache_SIKdata != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SIKdata).PropertyChanged -= PropertyChanged_SIKdata;
                            cache_SIKdata = null;
                        }
                        if (obj != null)
                        {
                            cache_SIKdata = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SIKdata;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.SensorsLiveGrid = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 3:
                {
                    this.Accelerometer = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 4:
                {
                    this.Compass = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 5:
                {
                    this.Light = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 6:
                {
                    this.Temperature = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 7:
                {
                    this.TempIamge = (global::Windows.UI.Xaml.Controls.Image)(target);
                }
                break;
            case 8:
                {
                    this.tempDegrees = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 9:
                {
                    this.LightImage = (global::Windows.UI.Xaml.Controls.Image)(target);
                }
                break;
            case 10:
                {
                    this.lightV = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 11:
                {
                    this.lightUV = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 12:
                {
                    this.lightIR = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 13:
                {
                    this.CompassPointer = (global::Windows.UI.Xaml.Controls.Image)(target);
                }
                break;
            case 14:
                {
                    this.CompassAngle = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 16:
                {
                    this.accelX = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 17:
                {
                    this.accelY = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 18:
                {
                    this.accelZ = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    SatKitLive_obj1_Bindings bindings = new SatKitLive_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

